In archive ledDisp.a:

ledDisp.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000168  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  0000019c  2**0
                  ALLOC
  3 .stab         00000a5c  00000000  00000000  0000019c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000fde  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  00001bd6  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <init>:
#include "ledDisp.h"

void init()
{
  sbi(DDRD, CLK);
   0:	8d 9a       	sbi	0x11, 5	; 17
  sbi(DDRD, LOAD);
   2:	8e 9a       	sbi	0x11, 6	; 17
  sbi(DDRD, DATA);
   4:	8f 9a       	sbi	0x11, 7	; 17
}
   6:	08 95       	ret

00000008 <sendOUT>:

void sendOUT (unsigned int data)  //send 16 bits of data
{
   8:	95 98       	cbi	0x12, 5	; 18
   a:	96 98       	cbi	0x12, 6	; 18
   c:	20 e1       	ldi	r18, 0x10	; 16
   e:	30 e0       	ldi	r19, 0x00	; 0
  //starting with the most significant bit
  unsigned int i = 0x8000; // to send 8 bits use 0x80
  CLK_LOW;               // clock low.
  10:	40 e0       	ldi	r20, 0x00	; 0
  LOAD_LOW;              // latch low.
  12:	50 e8       	ldi	r21, 0x80	; 128
  14:	bc 01       	movw	r22, r24
  16:	64 23       	and	r22, r20
  unsigned int i = 0x8000; // to send 8 bits use 0x80
  18:	75 23       	and	r23, r21
  1a:	67 2b       	or	r22, r23

  while(i > 0x0000)
  {
    if (data & i)   // Look at just one data bit
  1c:	01 f0       	breq	.+0      	; 0x1e <sendOUT+0x16>
  1e:	97 9a       	sbi	0x12, 7	; 18
  20:	95 9a       	sbi	0x12, 5	; 18
  22:	56 95       	lsr	r21
  24:	47 95       	ror	r20
    {
      DATA_HIGH;  //if the bit is high ->DATA_HIGH
  26:	95 98       	cbi	0x12, 5	; 18
    }
    else
    {
      DATA_LOW;   //else ->DATA_LOW
    }
    CLK_HIGH;        // clock high
  28:	21 50       	subi	r18, 0x01	; 1
    i >>= 1;      // shift i to the right
  2a:	31 09       	sbc	r19, r1
  2c:	01 f4       	brne	.+0      	; 0x2e <sendOUT+0x26>
    CLK_LOW;         // clock low
  2e:	96 9a       	sbi	0x12, 6	; 18
  30:	08 95       	ret
  32:	97 98       	cbi	0x12, 7	; 18
  while(i > 0x0000)
  34:	00 c0       	rjmp	.+0      	; 0x36 <test>

00000036 <test>:
  }
  LOAD_HIGH;            // spin RCK high to latch SR data.
}

void test()
{
  36:	8f ef       	ldi	r24, 0xFF	; 255
  38:	9f ef       	ldi	r25, 0xFF	; 255
  3a:	00 d0       	rcall	.+0      	; 0x3c <test+0x6>
  3c:	2f e7       	ldi	r18, 0x7F	; 127
  3e:	8a e1       	ldi	r24, 0x1A	; 26
  40:	96 e0       	ldi	r25, 0x06	; 6
  42:	21 50       	subi	r18, 0x01	; 1
  44:	80 40       	sbci	r24, 0x00	; 0
  46:	90 40       	sbci	r25, 0x00	; 0
  48:	01 f4       	brne	.+0      	; 0x4a <test+0x14>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <test+0x16>
  4c:	00 00       	nop
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	9f ef       	ldi	r25, 0xFF	; 255
  52:	00 c0       	rjmp	.+0      	; 0x54 <shutdown>

00000054 <shutdown>:
    _delay_ms(250);
    sendOUT(0xFF00);
}

void shutdown(int state)
{
  54:	00 c0       	rjmp	.+0      	; 0x56 <decode>

00000056 <decode>:
  sendOUT(state);
}

void decode(uint8_t digits)
{
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	99 60       	ori	r25, 0x09	; 9
  5a:	00 c0       	rjmp	.+0      	; 0x5c <scanLimit>

0000005c <scanLimit>:
 sendOUT((0x09 << 8)|digits);
}

void scanLimit(uint8_t digits)
{
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	9b 60       	ori	r25, 0x0B	; 11
  60:	00 c0       	rjmp	.+0      	; 0x62 <setIntensity>

00000062 <setIntensity>:
  sendOUT((0x0B <<8)|digits);
}

void setIntensity(uint8_t intensity)
{
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	9a 60       	ori	r25, 0x0A	; 10
  66:	00 c0       	rjmp	.+0      	; 0x68 <printInt>

00000068 <printInt>:
  sendOUT((0x0A << 8)|intensity);
}

void printInt (uint16_t number)
{
  68:	cf 92       	push	r12
  6a:	df 92       	push	r13
  6c:	ef 92       	push	r14
  6e:	ff 92       	push	r15
  70:	1f 93       	push	r17
  72:	cf 93       	push	r28
  74:	df 93       	push	r29
  76:	ec 01       	movw	r28, r24
  78:	e1 2c       	mov	r14, r1
  7a:	ff 24       	eor	r15, r15
  7c:	f3 94       	inc	r15
  7e:	10 e0       	ldi	r17, 0x00	; 0
  80:	9a e0       	ldi	r25, 0x0A	; 10
  82:	c9 2e       	mov	r12, r25
  84:	d1 2c       	mov	r13, r1
  86:	20 97       	sbiw	r28, 0x00	; 0
  88:	01 f4       	brne	.+0      	; 0x8a <printInt+0x22>
  8a:	8f e0       	ldi	r24, 0x0F	; 15
  8c:	11 11       	cpse	r17, r1
  8e:	00 c0       	rjmp	.+0      	; 0x90 <printInt+0x28>
  90:	ce 01       	movw	r24, r28
  92:	b6 01       	movw	r22, r12
  94:	00 d0       	rcall	.+0      	; 0x96 <printInt+0x2e>
  96:	eb 01       	movw	r28, r22
  98:	97 01       	movw	r18, r14
  9a:	28 2b       	or	r18, r24
  9c:	c9 01       	movw	r24, r18
  9e:	00 d0       	rcall	.+0      	; 0xa0 <printInt+0x38>
  a0:	1f 5f       	subi	r17, 0xFF	; 255
  a2:	f3 94       	inc	r15
  a4:	15 30       	cpi	r17, 0x05	; 5
  a6:	01 f4       	brne	.+0      	; 0xa8 <printInt+0x40>
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	1f 91       	pop	r17
  ae:	ff 90       	pop	r15
  b0:	ef 90       	pop	r14
  b2:	df 90       	pop	r13
  b4:	cf 90       	pop	r12
  b6:	08 95       	ret

000000b8 <printFloat>:
    sendOUT(((1+i)<<8)| digit);
  }
}

void printFloat (float number, uint8_t dp)
{
  b8:	cf 92       	push	r12
  ba:	df 92       	push	r13
  bc:	ef 92       	push	r14
  be:	ff 92       	push	r15
  c0:	0f 93       	push	r16
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	6b 01       	movw	r12, r22
  ca:	7c 01       	movw	r14, r24
  cc:	04 2f       	mov	r16, r20
  ce:	64 2f       	mov	r22, r20
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	00 d0       	rcall	.+0      	; 0xd8 <printFloat+0x20>
  d8:	9b 01       	movw	r18, r22
  da:	ac 01       	movw	r20, r24
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	80 e2       	ldi	r24, 0x20	; 32
  e2:	91 e4       	ldi	r25, 0x41	; 65
  e4:	00 d0       	rcall	.+0      	; 0xe6 <printFloat+0x2e>
  e6:	a7 01       	movw	r20, r14
  e8:	96 01       	movw	r18, r12
  ea:	00 d0       	rcall	.+0      	; 0xec <printFloat+0x34>
  ec:	00 d0       	rcall	.+0      	; 0xee <printFloat+0x36>
  ee:	eb 01       	movw	r28, r22
  f0:	e1 2c       	mov	r14, r1
  f2:	ff 24       	eor	r15, r15
  f4:	f3 94       	inc	r15
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	9a e0       	ldi	r25, 0x0A	; 10
  fa:	c9 2e       	mov	r12, r25
  fc:	d1 2c       	mov	r13, r1
  fe:	9f e0       	ldi	r25, 0x0F	; 15
 100:	20 97       	sbiw	r28, 0x00	; 0
 102:	01 f0       	breq	.+0      	; 0x104 <printFloat+0x4c>
 104:	ce 01       	movw	r24, r28
 106:	b6 01       	movw	r22, r12
 108:	00 d0       	rcall	.+0      	; 0x10a <printFloat+0x52>
 10a:	98 2f       	mov	r25, r24
 10c:	eb 01       	movw	r28, r22
 10e:	01 13       	cpse	r16, r17
 110:	00 c0       	rjmp	.+0      	; 0x112 <printFloat+0x5a>
 112:	90 68       	ori	r25, 0x80	; 128
 114:	97 01       	movw	r18, r14
 116:	29 2b       	or	r18, r25
 118:	c9 01       	movw	r24, r18
 11a:	00 d0       	rcall	.+0      	; 0x11c <printFloat+0x64>
 11c:	1f 5f       	subi	r17, 0xFF	; 255
 11e:	f3 94       	inc	r15
 120:	15 30       	cpi	r17, 0x05	; 5
 122:	01 f4       	brne	.+0      	; 0x124 <printFloat+0x6c>
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	ff 90       	pop	r15
 12e:	ef 90       	pop	r14
 130:	df 90       	pop	r13
 132:	cf 90       	pop	r12
 134:	08 95       	ret

00000136 <attention>:
    sendOUT(((1+i)<<8)| digit);
  }
}

void attention()
{
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	9c e0       	ldi	r25, 0x0C	; 12
 13a:	00 d0       	rcall	.+0      	; 0x13c <attention+0x6>
 13c:	2f e7       	ldi	r18, 0x7F	; 127
 13e:	89 ea       	ldi	r24, 0xA9	; 169
 140:	93 e0       	ldi	r25, 0x03	; 3
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	01 f4       	brne	.+0      	; 0x14a <attention+0x14>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <attention+0x16>
 14c:	00 00       	nop
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	9c e0       	ldi	r25, 0x0C	; 12
 152:	00 d0       	rcall	.+0      	; 0x154 <attention+0x1e>
 154:	2f e7       	ldi	r18, 0x7F	; 127
 156:	89 ea       	ldi	r24, 0xA9	; 169
 158:	93 e0       	ldi	r25, 0x03	; 3
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	01 f4       	brne	.+0      	; 0x162 <attention+0x2c>
 162:	00 c0       	rjmp	.+0      	; 0x164 <attention+0x2e>
 164:	00 00       	nop
 166:	08 95       	ret
